{"version":3,"file":"index.cjs","names":["Plyr","element: HTMLVideoElement | null","params: PlyrConfigurationProps | undefined","plyr","destroy: Destroy<PlyrInstance, PlyrConfigurationProps>","plyr: PlyrInstance | null","getAPI: GetAPI<PlyrInstance, PlyrConfigurationProps>","ref: Ref<APITypes>","params: PlyrConfigurationProps","deps: DependencyList | null","PlyrComponent: React.ForwardRefExoticComponent<\n  PlyrProps & RefAttributes<APITypes>\n>"],"sources":["../src/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport type {\n  DependencyList,\n  DetailedHTMLProps,\n  MutableRefObject,\n  Ref,\n  RefAttributes,\n  VideoHTMLAttributes,\n} from \"react\";\n// This is the critical change for the import\nimport * as Plyr from \"plyr\";\nimport useAptor, { Destroy, GetAPI, Instantiate } from \"react-aptor\";\n\n// And this is the critical change for usage\nconst PlyrJS = Plyr.default;\n\n/**\n * Represents an instance of the Plyr media player.\n * @see https://github.com/sampotts/plyr#api\n */\nexport type PlyrInstance = Plyr.default;\n\n/**\n * Configuration options for the Plyr media player.\n * @see https://github.com/sampotts/plyr#options\n */\nexport type PlyrOptions = Plyr.Options;\n\n/**\n * Describes the media source to be played by Plyr.\n * @see https://github.com/sampotts/plyr#sources\n */\nexport type PlyrSource = Plyr.SourceInfo;\n\ntype PlyrConfigurationProps = {\n  source: PlyrSource | null;\n  options?: PlyrOptions | null;\n};\n\ntype ReactVideoProps = DetailedHTMLProps<\n  VideoHTMLAttributes<HTMLVideoElement>,\n  HTMLVideoElement\n>;\n\n/**\n * Props for the main `<Plyr />` component.\n * Extends all standard HTMLVideoElement attributes.\n */\nexport type PlyrProps = Omit<ReactVideoProps, \"ref\"> & PlyrConfigurationProps;\n\n/**\n * Defines the structure of the API object accessible via the component's ref.\n */\nexport interface APITypes {\n  /** The underlying Plyr instance, allowing full access to the Plyr API. */\n  plyr: PlyrInstance;\n}\n\n/**\n * @internal\n * Instantiates the Plyr player on a given HTML element.\n * This function is used by the `useAptor` hook and is not intended for direct use.\n * It correctly handles null elements during React's render lifecycle.\n */\nconst instantiateImplementation = (\n  element: HTMLVideoElement | null,\n  params: PlyrConfigurationProps | undefined\n): PlyrInstance | null => {\n  if (element === null) {\n    return null;\n  }\n  const plyr = new PlyrJS(element, params?.options ?? {});\n  if (params?.source) {\n    plyr.source = params?.source;\n  }\n  return plyr;\n};\n\n/**\n * @internal\n * A type-asserted version of the instantiation logic to satisfy the strict\n * type definition from the `react-aptor` library, which incorrectly disallows\n * a `null` return type.\n */\nconst instantiate = instantiateImplementation as Instantiate<\n  PlyrInstance,\n  HTMLVideoElement,\n  PlyrConfigurationProps\n>;\n\n/**\n * @internal\n * Destroys the Plyr instance to clean up resources.\n * Used by the `useAptor` hook during component unmount.\n */\nconst destroy: Destroy<PlyrInstance, PlyrConfigurationProps> = (\n  plyr: PlyrInstance | null\n) => {\n  if (plyr) plyr.destroy();\n};\n\nconst noop = () => {};\n\n/**\n * @internal\n * Provides the API object that will be exposed on the ref.\n * Used by the `useAptor` hook.\n */\nconst getAPI: GetAPI<PlyrInstance, PlyrConfigurationProps> = (\n  plyr: PlyrInstance | null\n) => {\n  if (!plyr) {\n    return () =>\n      new Proxy({ plyr: { source: null } } as unknown as APITypes, {\n        get: (target, prop) => {\n          if (prop === \"plyr\") {\n            return target[prop];\n          }\n          return noop;\n        },\n      });\n  }\n\n  return () => ({\n    plyr,\n  });\n};\n\n/**\n * A React hook for advanced integration of the Plyr player.\n * This hook handles the lifecycle of the Plyr instance and attaches it to a ref.\n * It is recommended for building custom player components.\n *\n * @param ref A React ref object that will receive the Plyr API.\n * @param params An object containing the `source` and `options` for the player.\n * @param deps A dependency array to control when the player should be re-instantiated.\n * Defaults to `[params.options, params.source]`.\n * @returns A ref callback that must be attached to a `<video>` or `<div>` element.\n *\n * @example\n * ```jsx\n * import { usePlyr } from 'plyr-react';\n * import 'plyr-react/plyr.css';\n *\n * const CustomPlayer = React.forwardRef((props, ref) => {\n *   const { source, options } = props;\n *   const playerRef = usePlyr(ref, { source, options });\n *   return <video ref={playerRef} className=\"plyr-react plyr\" />;\n * });\n * ```\n */\nexport function usePlyr(\n  ref: Ref<APITypes>,\n  params: PlyrConfigurationProps,\n  deps: DependencyList | null = null\n): React.Ref<HTMLVideoElement> {\n  return useAptor<PlyrInstance, HTMLVideoElement, PlyrConfigurationProps>(\n    ref,\n    {\n      instantiate,\n      getAPI,\n      destroy,\n      params,\n    },\n    deps ?? [params.options, params.source]\n  );\n}\n\n/**\n * A responsive and accessible media player component for React, built on Plyr.\n * Supports HTML5 video, audio, YouTube, and Vimeo.\n *\n * This component forwards a ref to the underlying Plyr instance, allowing you\n * to access and control the player programmatically.\n *\n * @param {PlyrProps} props The props for the component.\n * @param {React.Ref<APITypes>} ref A ref to access the Plyr API.\n * @returns {React.ReactElement} A React component that renders the media player.\n *\n * @example\n * ```jsx\n * import { Plyr } from 'plyr-react';\n * import 'plyr-react/plyr.css';\n * import { useRef } from 'react';\n *\n * function MyVideoPlayer() {\n *   const ref = useRef(null);\n *\n *   const videoSource = {\n *     type: 'video',\n *     sources: [{ src: 'aqz-KE-bpKQ', provider: 'youtube' }],\n *   };\n *\n *   const handleClick = () => {\n *     if (ref.current && ref.current.plyr) {\n *       ref.current.plyr.play();\n *     }\n *   };\n *\n *   return (\n *     <div>\n *       <Plyr ref={ref} source={videoSource} />\n *       <button onClick={handleClick}>Play Video</button>\n *     </div>\n *   );\n * }\n * ```\n */\nconst PlyrComponent: React.ForwardRefExoticComponent<\n  PlyrProps & RefAttributes<APITypes>\n> = React.forwardRef<APITypes, PlyrProps>((props, ref) => {\n  const { source, options = null, ...rest } = props;\n  const raptorRef = usePlyr(ref, {\n    source,\n    options,\n  }) as MutableRefObject<HTMLVideoElement>;\n  return <video ref={raptorRef} className=\"plyr-react plyr\" {...rest} />;\n});\n\nPlyrComponent.displayName = \"Plyr\";\n\nexport { PlyrComponent as Plyr };"],"mappings":"6kBAcM,EAASA,EAAK,QAkDd,EAA4B,CAChCC,EACAC,IACwB,CACxB,GAAI,IAAY,KACd,OAAO,KAET,IAAMC,EAAO,IAAI,EAAO,EAAS,GAAQ,SAAW,CAAE,GAItD,OAHI,GAAQ,SACV,EAAK,OAAS,GAAQ,QAEjBA,CACR,EAQK,EAAc,EAWdC,EAAyD,AAC7DC,GACG,CACH,AAAIF,GAAM,EAAK,SAAS,AACzB,EAEK,EAAO,IAAM,CAAE,EAOfG,EAAuD,AAC3DD,GAEKF,EAYE,KAAO,CACZ,KAAA,CACD,GAbQ,IACL,IAAI,MAAM,CAAE,KAAM,CAAE,OAAQ,IAAM,CAAE,EAAyB,CAC3D,IAAK,CAAC,EAAQ,IACR,IAAS,OACJ,EAAO,GAET,CAEV,GA+BP,SAAgB,EACdI,EACAC,EACAC,EAA8B,KACD,CAC7B,MAAO,CAAA,EAAA,EAAA,SACL,EACA,CACE,cACA,SACA,UACA,QACD,EACD,GAAQ,CAAC,EAAO,QAAS,EAAO,MAAO,EACxC,AACF,CA0CD,MAAMC,EAEF,EAAM,WAAgC,CAAC,EAAO,IAAQ,CACxD,GAAM,CAAE,SAAQ,UAAU,KAAM,GAAG,EAAM,CAAG,EACtC,EAAY,EAAQ,EAAK,CAC7B,SACA,SACD,EAAC,CACF,MAAO,CAAA,EAAA,EAAA,KAAC,QAAA,CAAM,IAAK,EAAW,UAAU,kBAAkB,GAAI,GAAQ,AACvE,EAAC,CAEF,EAAc,YAAc"}