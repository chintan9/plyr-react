{"version":3,"file":"index.cjs","names":["Plyr","instantiate: Instantiate<\n  PlyrInstance,\n  HTMLVideoElement,\n  PlyrConfigurationProps\n>","plyr","destroy: Destroy<PlyrInstance, PlyrConfigurationProps>","plyr: PlyrInstance | null","getAPI: GetAPI<PlyrInstance, PlyrConfigurationProps>","ref: Ref<APITypes>","params: PlyrConfigurationProps","deps: DependencyList | null","PlyrComponent: React.ForwardRefExoticComponent<\n  PlyrProps & RefAttributes<APITypes>\n>"],"sources":["../src/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport type {\n  DependencyList,\n  DetailedHTMLProps,\n  MutableRefObject,\n  Ref,\n  RefAttributes, // Import RefAttributes\n  VideoHTMLAttributes,\n} from \"react\";\n// This is the critical change for the import\nimport * as Plyr from \"plyr\";\nimport useAptor, { Destroy, GetAPI, Instantiate } from \"react-aptor\";\n\n// And this is the critical change for usage\nconst PlyrJS = Plyr.default;\n\nexport type PlyrInstance = Plyr.default;\nexport type PlyrOptions = Plyr.Options;\nexport type PlyrSource = Plyr.SourceInfo;\n\ntype PlyrConfigurationProps = {\n  source: PlyrSource | null;\n  options?: PlyrOptions | null;\n};\n\ntype ReactVideoProps = DetailedHTMLProps<\n  VideoHTMLAttributes<HTMLVideoElement>,\n  HTMLVideoElement\n>;\nexport type PlyrProps = Omit<ReactVideoProps, \"ref\"> & PlyrConfigurationProps;\n\nexport interface APITypes {\n  plyr: PlyrInstance;\n}\n\nconst instantiate: Instantiate<\n  PlyrInstance,\n  HTMLVideoElement,\n  PlyrConfigurationProps\n> = (_, params) => {\n  const plyr = new PlyrJS(\".plyr-react\", params?.options ?? {});\n  if (params?.source) plyr.source = params?.source;\n  return plyr;\n};\n\nconst destroy: Destroy<PlyrInstance, PlyrConfigurationProps> = (\n  plyr: PlyrInstance | null\n) => {\n  if (plyr) plyr.destroy();\n};\n\nconst noop = () => {};\n\nconst getAPI: GetAPI<PlyrInstance, PlyrConfigurationProps> = (\n  plyr: PlyrInstance | null\n) => {\n  if (!plyr) {\n    return () =>\n      new Proxy({ plyr: { source: null } } as unknown as APITypes, {\n        get: (target, prop) => {\n          if (prop === \"plyr\") {\n            return target[prop];\n          }\n          return noop;\n        },\n      });\n  }\n\n  return () => ({\n    plyr,\n  });\n};\n\nexport function usePlyr(\n  ref: Ref<APITypes>,\n  params: PlyrConfigurationProps,\n  deps: DependencyList | null = null\n): React.Ref<HTMLVideoElement> {\n  return useAptor<PlyrInstance, HTMLVideoElement, PlyrConfigurationProps>(\n    ref,\n    {\n      instantiate,\n      getAPI,\n      destroy,\n      params,\n    },\n    deps ?? [params.options, params.source]\n  );\n}\n\nconst PlyrComponent: React.ForwardRefExoticComponent<\n  PlyrProps & RefAttributes<APITypes>\n> = React.forwardRef<APITypes, PlyrProps>((props, ref) => {\n  const { source, options = null, ...rest } = props;\n  const raptorRef = usePlyr(ref, {\n    source,\n    options,\n  }) as MutableRefObject<HTMLVideoElement>;\n  return <video ref={raptorRef} className=\"plyr-react plyr\" {...rest} />;\n});\n\nPlyrComponent.displayName = \"Plyr\";\n\nexport { PlyrComponent as Plyr };\n"],"mappings":"6kBAcM,EAASA,EAAK,QAqBdC,EAIF,CAAC,EAAG,IAAW,CACjB,IAAMC,EAAO,IAAI,EAAO,cAAe,GAAQ,SAAW,CAAE,GAE5D,OADI,GAAQ,SAAQ,EAAK,OAAS,GAAQ,QACnCA,CACR,EAEKC,EAAyD,AAC7DC,GACG,CACH,AAAIF,GAAM,EAAK,SAAS,AACzB,EAEK,EAAO,IAAM,CAAE,EAEfG,EAAuD,AAC3DD,GAEKF,EAYE,KAAO,CACZ,KAAA,CACD,GAbQ,IACL,IAAI,MAAM,CAAE,KAAM,CAAE,OAAQ,IAAM,CAAE,EAAyB,CAC3D,IAAK,CAAC,EAAQ,IACR,IAAS,OACJ,EAAO,GAET,CAEV,GAQP,SAAgB,EACdI,EACAC,EACAC,EAA8B,KACD,CAC7B,MAAO,CAAA,EAAA,EAAA,SACL,EACA,CACE,cACA,SACA,UACA,QACD,EACD,GAAQ,CAAC,EAAO,QAAS,EAAO,MAAO,EACxC,AACF,CAED,MAAMC,EAEF,EAAM,WAAgC,CAAC,EAAO,IAAQ,CACxD,GAAM,CAAE,SAAQ,UAAU,KAAM,GAAG,EAAM,CAAG,EACtC,EAAY,EAAQ,EAAK,CAC7B,SACA,SACD,EAAC,CACF,MAAO,CAAA,EAAA,EAAA,KAAC,QAAA,CAAM,IAAK,EAAW,UAAU,kBAAkB,GAAI,GAAQ,AACvE,EAAC,CAEF,EAAc,YAAc"}